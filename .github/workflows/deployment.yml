# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test
  build:
    name: Build Docker Image and Deploy to Docker Hub Registry
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hello-world:latest .
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-world:latest
  deploy:
    runs-on: ubuntu-latest
    name: Roll out the deployment
    needs: build

    steps:
      - uses: actions/checkout@v3
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Copy deployment.yaml to EC2
        run: |
          sed -i 's/CHANGE_EC2_DNS/${{ secrets.EC2_DNS }}/g' deployment.yaml
          scp -o StrictHostKeyChecking=no deployment.yaml ubuntu@${{ secrets.EC2_HOST }}:~/
      - name: Deploy application on K3s
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          sudo kubectl apply -f deployment.yaml
          sudo kubectl rollout status deployment my-app
          EOF